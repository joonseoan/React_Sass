@import '../../../Sass/base/typography';
@import '../../../Sass/base/utilities';

// /Grid Practice
@import '../../../Sass/layout/grid';

// button
@import '../../../Sass/components/_buton';
@import '../../../Sass//abstracts/mixins';

// composition
// @import '../../../Sass/Components/composition.scss';

.section-about {
    background-color: $color-grey-light-1;
    padding: 25rem 0;
    // vh in on the basis of view port
    // view port 100vh is top
    // view port 95vh is 5vh distance from top
    // viewport 70vh is 30vh distance from top
    // 20 vh is 80vh distance from top
    // -20vh is moving to top from current vh position chage
    margin-top: -20vh;
    
    @include respond(tab-port) {
        padding: 20rem 0;
    }

    .composition {
        
        position: relative;

        &__photo {
            // parent size's 50%
            width: 55%;
            box-shadow: 0 1.5rem 4rem rgba($color-black, .4);
            border-radius: 2px;
            position: absolute;
            z-index: 1;
            transition: all .2s;
            
            // outline-offset must be set in the parent class
            outline-offset: 2rem;

            @include respond(tab-port) {
                // from left side because it is 100% width
                float: left;
                // back to relative
                position: relative; 
                width: 33.33333333%;
                // 3rem for blur
                box-shadow: 0 1.5rem 3rem rgba($color-black, .2);
            }

            // position setup for each photo
            // Just remember that --p1, --p2, --p3 are in same elements as __photo
            // Therefore position absolute can be controlled over here.
            &--p1 {
                left: 0;
                top: -2rem;

                @include respond(tab-port) {
                    top: 0;
                    transform: scale(1.2);
                }
            }

            &--p2 {
                // start from right side
                right: 0;
                top: 2rem;

                @include respond(tab-port) {
                    top: -1rem;
                    // translate === translateX
                    transform: scale(1.3);
                    z-index: 100;
                }
            }

            &--p3 {
                left: 20%;
                top: 10rem;

                @include respond(tab-port) {
                    top: 1rem;
                    left: 0;
                    transform: scale(1.1);
                }
            }

            // each image has same hover value
            &:hover {
                // outline offset must be set in the parent / original element
                outline: 1.5rem solid $color-primary;
                // bigger picture and move up a little bit
                transform: scale(1.05) translateY(-.5rem);
                // y shadow bigger and color is darker
                box-shadow: 0 2.5rem 4rem rgba($color-black, .5);
                z-index: 2;
            }

        }
        // Not working!!
        // entire composition's children elements shrinks
        //      except for the currently hovering element
        // &:hover &__photo:not(:hover) {
        //     transform: scale(0.95);
        // }
        
    }

    .composition:hover .composition__photo:not(:hover) {
        transform: scale(0.95);
    }

}
